### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

enum EnableStatus {
  DELETE
  HIDE
  SHOW
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type LogUser {
  id: String!
}

input LogUserCreateManyWithoutUserInput {
  connect: [LogUserWhereUniqueInput!]
  create: [LogUserCreateWithoutUserInput!]
}

input LogUserCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  role: UserRole!
}

input LogUserListRelationFilter {
  every: LogUserWhereInput
  none: LogUserWhereInput
  some: LogUserWhereInput
}

input LogUserWhereInput {
  AND: [LogUserWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [LogUserWhereInput!]
  OR: [LogUserWhereInput!]
  role: UserRole
  user: UserWhereInput
  userId: StringFilter
}

input LogUserWhereUniqueInput {
  id: String
  userId: String
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, where: UserWhereInput): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input TaskCreateManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  create: [TaskCreateWithoutUserInput!]
}

input TaskCreateWithoutUserInput {
  countTime: Int!
  createdAt: DateTime
  finishTime: DateTime!
  id: String
  name: String!
  priority: Int!
  status: TaskStatus!
  total: Int!
  updatedAt: DateTime
  updatedBy: String!
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

enum TaskStatus {
  CANCELED
  COMPLETED
  ONGOING
  PENDING
  TIMEUP
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  countTime: IntFilter
  createdAt: DateTimeFilter
  createdBy: StringFilter
  finishTime: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  priority: IntFilter
  status: TaskStatus
  total: IntFilter
  updatedAt: DateTimeFilter
  updatedBy: StringFilter
  user: UserWhereInput
}

input TaskWhereUniqueInput {
  createdBy: String
  id: String
}

type User {
  id: String!
  name: String
}

input UserCreateInput {
  createdAt: DateTime
  enableStatus: EnableStatus!
  id: String
  LogUser: LogUserCreateManyWithoutUserInput
  name: String
  password: String!
  Task: TaskCreateManyWithoutUserInput
  updatedAt: DateTime
  userName: String!
}

enum UserRole {
  CASHIER
  CHEF
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  enableStatus: EnableStatus
  id: StringFilter
  LogUser: LogUserListRelationFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  Task: TaskListRelationFilter
  updatedAt: DateTimeFilter
  userName: StringFilter
}

input UserWhereUniqueInput {
  id: String
}
