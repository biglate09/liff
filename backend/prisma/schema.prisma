datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prisma_client_js {
  provider = "prisma-client-js"
}

enum BankName {
  KBANK
  DBK
  BBL
  KTB
  BAY
  KKP
  JPMCB
  CITI
  CIMB
  SMBT
  SMBC
  TMB
  TISCO
  TCR
  SCB
  TBANK
  BNPP
  BAAC
  MIZUHO
  MEGA
  UOBT
  LHBANK
  SCBT
  BOC
  BOFA
  GSB
  GHB
  ISBT
  ICBCT
  HSBC
}

// MAPPING                = เมื่อ Customer กดสร้าง Job
// CUSTOMER_CONFIRMED         = เมื่อ Customer กดเลือก Photographer
// PHOTOGRAPHER_CONFIRMED = เมื่อ Photographer ยืนยันการรับงาน
// ADMIN_CONFIRMED        = เมื่อ Admin กดยืนยันว่า Slip ที่ลูกค้าแนบมานั้นถูกต้อง
// COMPLETED              = เมื่อ Customer กดจบงานหลังจากถ่ายรูปและทำอะไรทุกอย่างเสร็จแล้ว
// CANCELLED              = เมื่อ Job นั้นเกินเวลา limit ที่กำหนด แต่ status ยังไม่เป็น ADMIN_CONFIRMED หรือ COMPLETED (batch job ?)
enum JobStatus {
  MAPPING
  CUSTOMER_CONFIRMED
  PHOTOGRAPHER_CONFIRMED
  ADMIN_CONFIRMED
  COMPLETED
  CANCELLED
}

enum Role {
  ADMIN
  CUSTOMER
  PHOTOGRAPHER
}

// ACCEPTED  = เมื่อ Photographer กดสนใจงานและยื่นข้อเสนอราคา
// CANCELLED = เมื่อ Photographer กดปฏิเสธงาน
// CONFIRMED = เมื่อ Customer กดเลือก Photographer
enum JobMappingStatus {
  ACCEPTED
  CANCELLED
  CONFIRMED
}

model Customer {
  id          String   @default(uuid()) @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  userId      String   @unique
  displayName String
  email       String
  jobs        Job[]
}

model Photographer {
  id                String    @default(uuid()) @id
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  userId            String    @unique
  bankAccountNumber String
  bankAccountName   String
  bank              BankName
  imgUrl            String
  name              String
  tel               String
  email             String
  moreInfoURL       String
  portfolio         Portfolio
  jobs              Job[]
}

model Portfolio {
  id             String       @default(uuid()) @id
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  photographer   Photographer @relation(fields: [photographerId], references: [id])
  photographerId String
  imgUrl         String[]
  info           String
}

model BankAccount {
  id                String   @default(uuid()) @id
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  bankAccountNumber String
  bankAccountName   String
  bank              BankName
}

model Job {
  id             String        @default(uuid()) @id
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  jobName        String
  jobNo          Int           @default(autoincrement())
  jobType        JobType       @relation(fields: [jobTypeId], references: [id])
  jobTypeId      String
  startJob       DateTime
  endJob         DateTime
  limit          DateTime
  location       String
  detail         String?
  tel            String
  email          String?
  guest          Int?
  startBudget    Float
  endBudget      Float
  status         JobStatus
  customer       Customer      @relation(fields: [customerId], references: [id])
  customerId     String
  photographer   Photographer? @relation(fields: [photographerId], references: [id])
  photographerId String?
  slip           String?
}

model JobType {
  id          String   @default(uuid()) @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  jobTypeName String
  jobs        Job[]
}

model JobMapping {
  jobId          String
  photographer   Photographer     @relation(fields: [photographerId], references: [id])
  photographerId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  price          Float
  status         JobMappingStatus
  @@id([jobId, photographerId])
}

model JobLog {
  jobId       String
  updatedAt   DateTime  @default(now()) @updatedAt
  updatedBy   String
  updatedRole Role
  jobStatus   JobStatus
  @@id([jobId, updatedAt])
}
